package com.psl.util;

import java.util.HashSet;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;

public class BankAccount implements Comparable<BankAccount> {
	String accountNo;
	double amount;
	
	

	public BankAccount() {
		super();
	}



	public BankAccount(String accountNo, double amount) {
		super();
		this.accountNo = accountNo;
		this.amount = amount;
	}

	
	


	public String getAccountNo() {
		return accountNo;
	}



	public void setAccountNo(String accountNo) {
		this.accountNo = accountNo;
	}



	public double getAmount() {
		return amount;
	}



	public void setAmount(double amount) {
		this.amount = amount;
	}



	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((accountNo == null) ? 0 : accountNo.hashCode());
		return result;
	}



	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BankAccount other = (BankAccount) obj;
		if (accountNo == null) {
			if (other.accountNo != null)
				return false;
		} else if (!accountNo.equals(other.accountNo))
			return false;
		return true;
	}

	@Override
	public String toString() {
		
		return String.format("BankAccount[%s,%f]", getAccountNo(),getAmount());
	}


	public static void main(String[] args) {
		Set<BankAccount> acs;
		
		acs=new HashSet<BankAccount>();
		acs.add(new BankAccount("231",55.22));
		acs.add(new BankAccount("123",2355.22));
		acs.add(new BankAccount("123",45545.22));
		acs.add(new BankAccount("2545",6755.22));
		
		System.out.println(acs.size());
		
		
		for(BankAccount ac:acs){
			System.out.println(ac);
		}
		
		System.out.println("==========+==========+===========+===================");
		SortedSet<BankAccount> sortedBankAccounts;
		sortedBankAccounts =new TreeSet<BankAccount>();
		sortedBankAccounts.add(new BankAccount("768", 6436));
		sortedBankAccounts.add(new BankAccount("12768", 67836));
		sortedBankAccounts.add(new BankAccount("34768", 7636));
		sortedBankAccounts.add(new BankAccount("56768", 436436));
		
		
		for(BankAccount ac :sortedBankAccounts)
		{
			System.out.println(ac);
		}
	}



	@Override
	public int compareTo(BankAccount anotherAccount) {
//		if(getAmount() >anotherAccount.getAmount())
//		return 1;
//		else if(getAmount() <anotherAccount.getAmount())
//			return -1;
//		return 0;
		return (int) (anotherAccount.getAmount()-getAmount());
	}
	
	
}
